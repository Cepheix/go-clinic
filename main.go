package main

import (
	"time"

	ginzap "github.com/gin-contrib/zap"
	"github.com/gin-gonic/gin"
	"github.com/go-clinic/appointments"
	"github.com/go-clinic/common"
	"github.com/spf13/viper"
	ginSwagger "github.com/swaggo/gin-swagger"
	"github.com/swaggo/gin-swagger/swaggerFiles"
	"go.uber.org/zap"

	_ "github.com/go-clinic/docs" // docs is generated by Swag CLI, you have to import it.
)

// @title Swagger Example API
// @version 1.0
// @description This is a sample server Petstore server.
// @termsOfService http://swagger.io/terms/

// @contact.name API Support
// @contact.url http://www.swagger.io/support
// @contact.email support@swagger.io

// @license.name Apache 2.0
// @license.url http://www.apache.org/licenses/LICENSE-2.0.html

// @BasePath /api
func main() {
	config := ReadConfiguration()
	logger := CreateLogger(config)
	router := CreateGinServerInstance(logger)

	RegisterModules(router, config)

	router.Run(config.Server.FullAddress())
}

func ReadConfiguration() common.Configuration {
	var config common.Configuration

	viper := viper.New()
	viper.AddConfigPath(".")
	viper.SetConfigFile("settings.json")
	viper.ReadInConfig()

	err := viper.Unmarshal(&config)
	if err != nil {
		panic(err.Error())
	}

	return config
}

func CreateLogger(configuration common.Configuration) *zap.Logger {
	var loggingConfiguration zap.Config

	if configuration.Logging.Development {
		loggingConfiguration = zap.NewDevelopmentConfig()
	} else {
		loggingConfiguration = zap.NewProductionConfig()
	}

	logger, err := loggingConfiguration.Build()

	if err != nil {
		panic(err.Error())
	}

	return logger
}

func CreateGinServerInstance(logger *zap.Logger) *gin.Engine {
	router := gin.New()

	// Add a ginzap middleware, which Logs all requests
	router.Use(ginzap.Ginzap(logger, time.RFC3339, true))

	// Logs all panic to error log
	router.Use(ginzap.RecoveryWithZap(logger, true))

	return router
}

func RegisterModules(router gin.IRouter, configuration common.Configuration) {
	AddSwaggerMiddleware(router, configuration)

	api := router.Group("/api")

	appointments.RegisterModule(api.Group("/appointments"))
}

func AddSwaggerMiddleware(router gin.IRouter, configuration common.Configuration) {
	url := ginSwagger.URL(configuration.Server.SwaggerDocumentAddress()) // The url pointing to API definition
	swaggerMatch := configuration.Server.SwaggerPrefix + "/*any"
	router.GET(swaggerMatch, ginSwagger.WrapHandler(swaggerFiles.Handler, url))
}
